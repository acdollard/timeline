---
import Layout from "../layouts/Layout.astro";
import { supabase } from "../lib/supabase";

const { cookies, redirect, request } = Astro;

// Check if there's an error or success message in the URL
const url = new URL(request.url);
const error = url.searchParams.get("error");
const success = url.searchParams.get("success");

// Check if we have tokens in the hash fragment (from Supabase redirect)
const hasHashTokens = url.hash.includes("access_token");

// Get tokens from cookies
const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

// Redirect if already logged in
if (accessToken && refreshToken) {
  try {
    const {
      data: { session },
      error: sessionError,
    } = await supabase.auth.setSession({
      access_token: accessToken.value,
      refresh_token: refreshToken.value,
    });

    if (session && !sessionError) {
      return redirect("/");
    }
  } catch (e) {
    console.error("Error validating session:", e);
  }
}

// Helper function to get error message
const getErrorMessage = (error: string | null) => {
  switch (error) {
    case "invalid_email":
      return "Please enter a valid email address.";
    case "user_not_found":
      return "No account found with this email address.";
    case "too_many_requests":
      return "Too many password reset attempts. Please try again later.";
    case "invalid_link":
      return "The password reset link is invalid or has expired. Please request a new one.";
    default:
      return "An error occurred. Please try again.";
  }
};

// Helper function to get success message
const getSuccessMessage = (success: string | null) => {
  switch (success) {
    case "reset_email_sent":
      return "Password reset email sent! Please check your inbox.";
    default:
      return "Password reset email sent! Please check your inbox.";
  }
};
---

<Layout title="Forgot Password">
  <div
    class="flex flex-col items-center justify-center h-screen bg-darkestGray"
  >
    <div
      class="bg-gray-800 rounded-lg flex flex-col items-center justify-center gap-4 w-full max-w-md p-8 text-white"
    >
      <h1 class="text-2xl font-bold">Forgot Password</h1>
      <p class="text-sm text-gray-400 text-center">
        Enter your email address and we'll send you a link to reset your
        password.
      </p>

      {
        error && (
          <div class="w-full p-3 bg-red-500/10 border border-red-500/20 rounded-md">
            <p class="text-sm text-red-400">{getErrorMessage(error)}</p>
          </div>
        )
      }

      {
        success && (
          <div class="w-full p-3 bg-green-500/10 border border-green-500/20 rounded-md">
            <p class="text-sm text-green-400">{getSuccessMessage(success)}</p>
          </div>
        )
      }

      <form
        action="/api/auth/forgot-password"
        method="post"
        class="flex flex-col items-center justify-center gap-4 w-full"
      >
        <div class="w-full">
          <label
            for="email"
            class="block text-sm font-medium text-gray-300 mb-1">Email</label
          >
          <input
            type="email"
            name="email"
            id="email"
            required
            class="w-full bg-gray-700 rounded-md p-2 text-white focus:outline-none focus:ring-2 focus:ring-primary"
          />
        </div>
        <button
          type="submit"
          class="w-full bg-primary text-white px-4 py-2 rounded-md hover:bg-primary/90 transition-colors"
        >
          Send Reset Link
        </button>
      </form>

      <div class="flex flex-col items-center gap-2">
        <a
          href="/signin"
          class="text-sm text-primary hover:text-primary/90 transition-colors"
        >
          Back to Sign In
        </a>
        <p class="text-sm text-gray-400">
          Don't have an account?
          <a href="/register" class="text-primary hover:text-primary/90 ml-1"
            >Create one</a
          >
        </p>
      </div>
    </div>
  </div>

  {hasHashTokens && (
    <script>
      console.log('Hash tokens detected, processing...');
      // Extract tokens from hash fragment and redirect to reset-password with query params
      const hash = window.location.hash.substring(1); // Remove the #
      console.log('Hash fragment:', hash);
      const params = new URLSearchParams(hash);
      
      const accessToken = params.get('access_token');
      const refreshToken = params.get('refresh_token');
      
      console.log('Access token found:', !!accessToken);
      console.log('Refresh token found:', !!refreshToken);
      
      if (accessToken && refreshToken) {
        console.log('Redirecting to reset-password...');
        // Redirect to reset-password with tokens as query parameters
        const newUrl = new URL('/reset-password', window.location.origin);
        newUrl.searchParams.set('access_token', accessToken);
        newUrl.searchParams.set('refresh_token', refreshToken);
        console.log('New URL:', newUrl.toString());
        window.location.href = newUrl.toString();
      } else {
        console.log('Missing tokens, not redirecting');
      }
    </script>
  )}

  <!-- Fallback script that always runs to check for hash tokens -->
  <script>
    // Always check for hash tokens on page load
    if (window.location.hash && window.location.hash.includes('access_token')) {
      console.log('Fallback: Hash tokens detected');
      const hash = window.location.hash.substring(1);
      const params = new URLSearchParams(hash);
      
      const accessToken = params.get('access_token');
      const refreshToken = params.get('refresh_token');
      
      if (accessToken && refreshToken) {
        console.log('Fallback: Redirecting to reset-password');
        const newUrl = new URL('/reset-password', window.location.origin);
        newUrl.searchParams.set('access_token', accessToken);
        newUrl.searchParams.set('refresh_token', refreshToken);
        window.location.href = newUrl.toString();
      }
    }
  </script>
</Layout>
