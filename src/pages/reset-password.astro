---
import Layout from "../layouts/Layout.astro";
import { supabase } from "../lib/supabase";

const { cookies, redirect, request } = Astro;

// Get URL parameters
const url = new URL(request.url);
const access_token = url.searchParams.get("access_token");
const refresh_token = url.searchParams.get("refresh_token");
const error = url.searchParams.get("error");
const success = url.searchParams.get("success");

// Check if we have tokens in the hash fragment (client-side)
const hasHashTokens = url.hash.includes("access_token");

// If no tokens in query params but we have hash tokens, let client-side handle it
// If no tokens at all, redirect to forgot password
if (!access_token || !refresh_token) {
  if (!hasHashTokens) {
    return redirect("/forgot-password?error=invalid_link");
  }
  // If we have hash tokens, continue to render the page with client-side script
}

// Set the session with the tokens from the email (only if we have query params)
let session = null;
let sessionError = null;

if (access_token && refresh_token) {
  const sessionResult = await supabase.auth.setSession({
    access_token,
    refresh_token,
  });
  session = sessionResult.data.session;
  sessionError = sessionResult.error;
}

// If we have hash tokens but no query tokens, let client-side handle the session
// If we have query tokens but session failed, redirect to forgot password
if (access_token && refresh_token && (sessionError || !session)) {
  return redirect("/forgot-password?error=invalid_link");
}

// Helper function to get error message
const getErrorMessage = (error: string | null) => {
  switch (error) {
    case "invalid_link":
      return "Invalid or expired reset link. Please request a new one.";
    case "password_too_short":
      return "Password must be at least 6 characters long.";
    case "password_mismatch":
      return "Passwords do not match.";
    case "weak_password":
      return "Password is too weak. Please choose a stronger password.";
    default:
      return "An error occurred. Please try again.";
  }
};

// Helper function to get success message
const getSuccessMessage = (success: string | null) => {
  switch (success) {
    case "password_updated":
      return "Password updated successfully! You can now sign in with your new password.";
    default:
      return "Password updated successfully!";
  }
};
---

<Layout title="Reset Password">
  <div
    class="flex flex-col items-center justify-center h-screen bg-darkestGray"
  >
    <div
      class="bg-gray-800 rounded-lg flex flex-col items-center justify-center gap-4 w-full max-w-md p-8 text-white"
    >
      <h1 class="text-2xl font-bold">Reset Password</h1>
      <p class="text-sm text-gray-400 text-center">
        Enter your new password below.
      </p>

      {
        error && (
          <div class="w-full p-3 bg-red-500/10 border border-red-500/20 rounded-md">
            <p class="text-sm text-red-400">{getErrorMessage(error)}</p>
          </div>
        )
      }

      {
        success && (
          <div class="w-full p-3 bg-green-500/10 border border-green-500/20 rounded-md">
            <p class="text-sm text-green-400">{getSuccessMessage(success)}</p>
          </div>
        )
      }

      <form
        action="/api/auth/reset-password"
        method="post"
        class="flex flex-col items-center justify-center gap-4 w-full"
        id="reset-form"
      >
        <input type="hidden" name="access_token" value={access_token || ""} />
        <input type="hidden" name="refresh_token" value={refresh_token || ""} />

        <div class="w-full">
          <label
            for="password"
            class="block text-sm font-medium text-gray-300 mb-1"
            >New Password</label
          >
          <input
            type="password"
            name="password"
            id="password"
            required
            minlength="6"
            class="w-full bg-gray-700 rounded-md p-2 text-white focus:outline-none focus:ring-2 focus:ring-primary"
          />
        </div>

        <div class="w-full">
          <label
            for="confirm_password"
            class="block text-sm font-medium text-gray-300 mb-1"
            >Confirm New Password</label
          >
          <input
            type="password"
            name="confirm_password"
            id="confirm_password"
            required
            minlength="6"
            class="w-full bg-gray-700 rounded-md p-2 text-white focus:outline-none focus:ring-2 focus:ring-primary"
          />
        </div>

        <button
          type="submit"
          class="w-full bg-primary text-white px-4 py-2 rounded-md hover:bg-primary/90 transition-colors"
        >
          Update Password
        </button>
      </form>

      <div class="flex flex-col items-center gap-2">
        <a
          href="/signin"
          class="text-sm text-primary hover:text-primary/90 transition-colors"
        >
          Back to Sign In
        </a>
      </div>
    </div>
  </div>

  {hasHashTokens && (
    <script>
      // Extract tokens from hash fragment and redirect to reset-password with query params
      const hash = window.location.hash.substring(1); // Remove the #
      const params = new URLSearchParams(hash);
      
      const accessToken = params.get('access_token');
      const refreshToken = params.get('refresh_token');
      
      if (accessToken && refreshToken) {
        // Redirect to reset-password with tokens as query parameters
        const newUrl = new URL('/reset-password', window.location.origin);
        newUrl.searchParams.set('access_token', accessToken);
        newUrl.searchParams.set('refresh_token', refreshToken);
        window.location.href = newUrl.toString();
      } else {
        // If no tokens in hash, redirect to forgot-password
        window.location.href = '/forgot-password?error=invalid_link';
      }
    </script>
  )}
</Layout>

